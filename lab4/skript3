#!/bin/bash
backups="$HOME/../home/user/"
source="$HOME/../home/user/source/"
dateNow=$(date "+%F")
isNewDir=false
backupPrefix="Backup-"
backupReport="$HOME/../home/user/.backup-report"
todaySec=$(date --date=$dateNow "+%s")
lastbackup=$(ls $backups -1 | grep -E "Backup-[0-9]{4}-[0-9]{2}-[0-9]{2}" | sort -r -k2 | head -1)
lastbackupSec=$(date --date=$(ls $backups -1 | grep -Eo "Backup-[0-9]{4}-[0-9]{2}-[0-9]{2}" | sort -r -k2 | head -1 | sed "s/^Backup-//") "+%s")
let dateDiff=($todaySec\-$lastbackupSec)/60/60/24
if ! [ -f $backupReport ]
then
touch $backupReport
fi
if [ -z $lastbackup ]
then
	mkdir $backups$backupPrefix$dateNow
	nowbackup=$backups$backupPrefix$dateNow"/"
	isNewDir=true
	echo $nowbackup
else
if [ "$dateDiff" -le 7 ]
then
    	nowbackup=$backups$lastbackup"/"
else
    	mkdir $backups$backupPrefix$dateNow
 	nowbackup=$backups$backupPrefix$dateNow"/"
    	isNewDir=true
fi
fi
if [ "$isNewDir" = true ]
then
    	echo "backup created on "$dateNow" from directory "$source" Files:" >> $backupReport
    	for file in $(ls $source -1)
    	do
        cp "$source$file" "$nowbackup$file"
        echo $file >> $backupReport
    	done
else
    	echo "Updating backup in directory "$nowbackup". Date:"$dateNow"" >> $backupReport
    	for file in $(ls $source -1)
    	do
    	currentfile=$nowbackup$file
    	if [ -f $currentfile ];
        	then
        	source_size=$(du $source$file | awk '{print $1}')
        	actual_size=$(du $currentfile | awk '{print $1}')
            	if [ "$source_size" -ne "$actual_size" ]
            	then
            	mv $currentfile $currentfile"."$dateNow
            	cp $source$file $currentfile
            	echo "New version of file "$file" found. Old version moved to "$file.$dateNow"" >> $backupReport
            	fi
        	else
            	cp $source$file $currentfile
            	echo "New file "$file" copied" >> $backupReport
        fi
    	done
fi
